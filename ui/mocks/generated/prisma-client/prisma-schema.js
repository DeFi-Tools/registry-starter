module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateChallenge {
  count: Int!
}

type AggregateToken {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Challenge {
  id: ID!
  description: String
  createdAt: DateTime!
  votesFor: Int
  votesAgainst: Int
  token: Token
  owner: String
  resolved: Boolean
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type ChallengeConnection {
  pageInfo: PageInfo!
  edges: [ChallengeEdge]!
  aggregate: AggregateChallenge!
}

input ChallengeCreateInput {
  id: ID
  description: String
  votesFor: Int
  votesAgainst: Int
  token: TokenCreateOneWithoutChallengesInput
  owner: String
  resolved: Boolean
  votes: VoteCreateManyWithoutChallengeInput
}

input ChallengeCreateManyInput {
  create: [ChallengeCreateInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateManyWithoutTokenInput {
  create: [ChallengeCreateWithoutTokenInput!]
  connect: [ChallengeWhereUniqueInput!]
}

input ChallengeCreateOneWithoutVotesInput {
  create: ChallengeCreateWithoutVotesInput
  connect: ChallengeWhereUniqueInput
}

input ChallengeCreateWithoutTokenInput {
  id: ID
  description: String
  votesFor: Int
  votesAgainst: Int
  owner: String
  resolved: Boolean
  votes: VoteCreateManyWithoutChallengeInput
}

input ChallengeCreateWithoutVotesInput {
  id: ID
  description: String
  votesFor: Int
  votesAgainst: Int
  token: TokenCreateOneWithoutChallengesInput
  owner: String
  resolved: Boolean
}

type ChallengeEdge {
  node: Challenge!
  cursor: String!
}

enum ChallengeOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  votesFor_ASC
  votesFor_DESC
  votesAgainst_ASC
  votesAgainst_DESC
  owner_ASC
  owner_DESC
  resolved_ASC
  resolved_DESC
}

type ChallengePreviousValues {
  id: ID!
  description: String
  createdAt: DateTime!
  votesFor: Int
  votesAgainst: Int
  owner: String
  resolved: Boolean
}

input ChallengeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  votesFor: Int
  votesFor_not: Int
  votesFor_in: [Int!]
  votesFor_not_in: [Int!]
  votesFor_lt: Int
  votesFor_lte: Int
  votesFor_gt: Int
  votesFor_gte: Int
  votesAgainst: Int
  votesAgainst_not: Int
  votesAgainst_in: [Int!]
  votesAgainst_not_in: [Int!]
  votesAgainst_lt: Int
  votesAgainst_lte: Int
  votesAgainst_gt: Int
  votesAgainst_gte: Int
  owner: String
  owner_not: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_gt: String
  owner_gte: String
  owner_contains: String
  owner_not_contains: String
  owner_starts_with: String
  owner_not_starts_with: String
  owner_ends_with: String
  owner_not_ends_with: String
  resolved: Boolean
  resolved_not: Boolean
  AND: [ChallengeScalarWhereInput!]
  OR: [ChallengeScalarWhereInput!]
  NOT: [ChallengeScalarWhereInput!]
}

type ChallengeSubscriptionPayload {
  mutation: MutationType!
  node: Challenge
  updatedFields: [String!]
  previousValues: ChallengePreviousValues
}

input ChallengeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChallengeWhereInput
  AND: [ChallengeSubscriptionWhereInput!]
  OR: [ChallengeSubscriptionWhereInput!]
  NOT: [ChallengeSubscriptionWhereInput!]
}

input ChallengeUpdateDataInput {
  description: String
  votesFor: Int
  votesAgainst: Int
  token: TokenUpdateOneWithoutChallengesInput
  owner: String
  resolved: Boolean
  votes: VoteUpdateManyWithoutChallengeInput
}

input ChallengeUpdateInput {
  description: String
  votesFor: Int
  votesAgainst: Int
  token: TokenUpdateOneWithoutChallengesInput
  owner: String
  resolved: Boolean
  votes: VoteUpdateManyWithoutChallengeInput
}

input ChallengeUpdateManyDataInput {
  description: String
  votesFor: Int
  votesAgainst: Int
  owner: String
  resolved: Boolean
}

input ChallengeUpdateManyInput {
  create: [ChallengeCreateInput!]
  update: [ChallengeUpdateWithWhereUniqueNestedInput!]
  upsert: [ChallengeUpsertWithWhereUniqueNestedInput!]
  delete: [ChallengeWhereUniqueInput!]
  connect: [ChallengeWhereUniqueInput!]
  set: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  deleteMany: [ChallengeScalarWhereInput!]
  updateMany: [ChallengeUpdateManyWithWhereNestedInput!]
}

input ChallengeUpdateManyMutationInput {
  description: String
  votesFor: Int
  votesAgainst: Int
  owner: String
  resolved: Boolean
}

input ChallengeUpdateManyWithoutTokenInput {
  create: [ChallengeCreateWithoutTokenInput!]
  delete: [ChallengeWhereUniqueInput!]
  connect: [ChallengeWhereUniqueInput!]
  set: [ChallengeWhereUniqueInput!]
  disconnect: [ChallengeWhereUniqueInput!]
  update: [ChallengeUpdateWithWhereUniqueWithoutTokenInput!]
  upsert: [ChallengeUpsertWithWhereUniqueWithoutTokenInput!]
  deleteMany: [ChallengeScalarWhereInput!]
  updateMany: [ChallengeUpdateManyWithWhereNestedInput!]
}

input ChallengeUpdateManyWithWhereNestedInput {
  where: ChallengeScalarWhereInput!
  data: ChallengeUpdateManyDataInput!
}

input ChallengeUpdateOneRequiredWithoutVotesInput {
  create: ChallengeCreateWithoutVotesInput
  update: ChallengeUpdateWithoutVotesDataInput
  upsert: ChallengeUpsertWithoutVotesInput
  connect: ChallengeWhereUniqueInput
}

input ChallengeUpdateWithoutTokenDataInput {
  description: String
  votesFor: Int
  votesAgainst: Int
  owner: String
  resolved: Boolean
  votes: VoteUpdateManyWithoutChallengeInput
}

input ChallengeUpdateWithoutVotesDataInput {
  description: String
  votesFor: Int
  votesAgainst: Int
  token: TokenUpdateOneWithoutChallengesInput
  owner: String
  resolved: Boolean
}

input ChallengeUpdateWithWhereUniqueNestedInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateDataInput!
}

input ChallengeUpdateWithWhereUniqueWithoutTokenInput {
  where: ChallengeWhereUniqueInput!
  data: ChallengeUpdateWithoutTokenDataInput!
}

input ChallengeUpsertWithoutVotesInput {
  update: ChallengeUpdateWithoutVotesDataInput!
  create: ChallengeCreateWithoutVotesInput!
}

input ChallengeUpsertWithWhereUniqueNestedInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateDataInput!
  create: ChallengeCreateInput!
}

input ChallengeUpsertWithWhereUniqueWithoutTokenInput {
  where: ChallengeWhereUniqueInput!
  update: ChallengeUpdateWithoutTokenDataInput!
  create: ChallengeCreateWithoutTokenInput!
}

input ChallengeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  votesFor: Int
  votesFor_not: Int
  votesFor_in: [Int!]
  votesFor_not_in: [Int!]
  votesFor_lt: Int
  votesFor_lte: Int
  votesFor_gt: Int
  votesFor_gte: Int
  votesAgainst: Int
  votesAgainst_not: Int
  votesAgainst_in: [Int!]
  votesAgainst_not_in: [Int!]
  votesAgainst_lt: Int
  votesAgainst_lte: Int
  votesAgainst_gt: Int
  votesAgainst_gte: Int
  token: TokenWhereInput
  owner: String
  owner_not: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_gt: String
  owner_gte: String
  owner_contains: String
  owner_not_contains: String
  owner_starts_with: String
  owner_not_starts_with: String
  owner_ends_with: String
  owner_not_ends_with: String
  resolved: Boolean
  resolved_not: Boolean
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  AND: [ChallengeWhereInput!]
  OR: [ChallengeWhereInput!]
  NOT: [ChallengeWhereInput!]
}

input ChallengeWhereUniqueInput {
  id: ID
}

enum Choice {
  RemoveToken
  KeepToken
}

scalar DateTime

scalar Long

type Mutation {
  createChallenge(data: ChallengeCreateInput!): Challenge!
  updateChallenge(data: ChallengeUpdateInput!, where: ChallengeWhereUniqueInput!): Challenge
  updateManyChallenges(data: ChallengeUpdateManyMutationInput!, where: ChallengeWhereInput): BatchPayload!
  upsertChallenge(where: ChallengeWhereUniqueInput!, create: ChallengeCreateInput!, update: ChallengeUpdateInput!): Challenge!
  deleteChallenge(where: ChallengeWhereUniqueInput!): Challenge
  deleteManyChallenges(where: ChallengeWhereInput): BatchPayload!
  createToken(data: TokenCreateInput!): Token!
  updateToken(data: TokenUpdateInput!, where: TokenWhereUniqueInput!): Token
  updateManyTokens(data: TokenUpdateManyMutationInput!, where: TokenWhereInput): BatchPayload!
  upsertToken(where: TokenWhereUniqueInput!, create: TokenCreateInput!, update: TokenUpdateInput!): Token!
  deleteToken(where: TokenWhereUniqueInput!): Token
  deleteManyTokens(where: TokenWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVote(data: VoteCreateInput!): Vote!
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateManyVotes(data: VoteUpdateManyMutationInput!, where: VoteWhereInput): BatchPayload!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  challenge(where: ChallengeWhereUniqueInput!): Challenge
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge]!
  challengesConnection(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChallengeConnection!
  token(where: TokenWhereUniqueInput!): Token
  tokens(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Token]!
  tokensConnection(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TokenConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vote(where: VoteWhereUniqueInput!): Vote
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  node(id: ID!): Node
}

type Subscription {
  challenge(where: ChallengeSubscriptionWhereInput): ChallengeSubscriptionPayload
  token(where: TokenSubscriptionWhereInput): TokenSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
}

type Token {
  id: ID!
  symbol: String!
  description: String!
  image: String
  amount: Float
  owner: User
  isChallenged: Boolean
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
  isWhitelistedMember: Boolean
  totalVotes: Int
  reputation: Int
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  createdAt: DateTime!
}

type TokenConnection {
  pageInfo: PageInfo!
  edges: [TokenEdge]!
  aggregate: AggregateToken!
}

input TokenCreateInput {
  id: ID
  symbol: String!
  description: String!
  image: String
  amount: Float
  owner: UserCreateOneWithoutTokensInput
  isChallenged: Boolean
  challenges: ChallengeCreateManyWithoutTokenInput
  isWhitelistedMember: Boolean
  totalVotes: Int
  reputation: Int
  votes: VoteCreateManyInput
}

input TokenCreateManyWithoutOwnerInput {
  create: [TokenCreateWithoutOwnerInput!]
  connect: [TokenWhereUniqueInput!]
}

input TokenCreateOneWithoutChallengesInput {
  create: TokenCreateWithoutChallengesInput
  connect: TokenWhereUniqueInput
}

input TokenCreateWithoutChallengesInput {
  id: ID
  symbol: String!
  description: String!
  image: String
  amount: Float
  owner: UserCreateOneWithoutTokensInput
  isChallenged: Boolean
  isWhitelistedMember: Boolean
  totalVotes: Int
  reputation: Int
  votes: VoteCreateManyInput
}

input TokenCreateWithoutOwnerInput {
  id: ID
  symbol: String!
  description: String!
  image: String
  amount: Float
  isChallenged: Boolean
  challenges: ChallengeCreateManyWithoutTokenInput
  isWhitelistedMember: Boolean
  totalVotes: Int
  reputation: Int
  votes: VoteCreateManyInput
}

type TokenEdge {
  node: Token!
  cursor: String!
}

enum TokenOrderByInput {
  id_ASC
  id_DESC
  symbol_ASC
  symbol_DESC
  description_ASC
  description_DESC
  image_ASC
  image_DESC
  amount_ASC
  amount_DESC
  isChallenged_ASC
  isChallenged_DESC
  isWhitelistedMember_ASC
  isWhitelistedMember_DESC
  totalVotes_ASC
  totalVotes_DESC
  reputation_ASC
  reputation_DESC
  createdAt_ASC
  createdAt_DESC
}

type TokenPreviousValues {
  id: ID!
  symbol: String!
  description: String!
  image: String
  amount: Float
  isChallenged: Boolean
  isWhitelistedMember: Boolean
  totalVotes: Int
  reputation: Int
  createdAt: DateTime!
}

input TokenScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  symbol: String
  symbol_not: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_gt: String
  symbol_gte: String
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  isChallenged: Boolean
  isChallenged_not: Boolean
  isWhitelistedMember: Boolean
  isWhitelistedMember_not: Boolean
  totalVotes: Int
  totalVotes_not: Int
  totalVotes_in: [Int!]
  totalVotes_not_in: [Int!]
  totalVotes_lt: Int
  totalVotes_lte: Int
  totalVotes_gt: Int
  totalVotes_gte: Int
  reputation: Int
  reputation_not: Int
  reputation_in: [Int!]
  reputation_not_in: [Int!]
  reputation_lt: Int
  reputation_lte: Int
  reputation_gt: Int
  reputation_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TokenScalarWhereInput!]
  OR: [TokenScalarWhereInput!]
  NOT: [TokenScalarWhereInput!]
}

type TokenSubscriptionPayload {
  mutation: MutationType!
  node: Token
  updatedFields: [String!]
  previousValues: TokenPreviousValues
}

input TokenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TokenWhereInput
  AND: [TokenSubscriptionWhereInput!]
  OR: [TokenSubscriptionWhereInput!]
  NOT: [TokenSubscriptionWhereInput!]
}

input TokenUpdateInput {
  symbol: String
  description: String
  image: String
  amount: Float
  owner: UserUpdateOneWithoutTokensInput
  isChallenged: Boolean
  challenges: ChallengeUpdateManyWithoutTokenInput
  isWhitelistedMember: Boolean
  totalVotes: Int
  reputation: Int
  votes: VoteUpdateManyInput
}

input TokenUpdateManyDataInput {
  symbol: String
  description: String
  image: String
  amount: Float
  isChallenged: Boolean
  isWhitelistedMember: Boolean
  totalVotes: Int
  reputation: Int
}

input TokenUpdateManyMutationInput {
  symbol: String
  description: String
  image: String
  amount: Float
  isChallenged: Boolean
  isWhitelistedMember: Boolean
  totalVotes: Int
  reputation: Int
}

input TokenUpdateManyWithoutOwnerInput {
  create: [TokenCreateWithoutOwnerInput!]
  delete: [TokenWhereUniqueInput!]
  connect: [TokenWhereUniqueInput!]
  set: [TokenWhereUniqueInput!]
  disconnect: [TokenWhereUniqueInput!]
  update: [TokenUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [TokenUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [TokenScalarWhereInput!]
  updateMany: [TokenUpdateManyWithWhereNestedInput!]
}

input TokenUpdateManyWithWhereNestedInput {
  where: TokenScalarWhereInput!
  data: TokenUpdateManyDataInput!
}

input TokenUpdateOneWithoutChallengesInput {
  create: TokenCreateWithoutChallengesInput
  update: TokenUpdateWithoutChallengesDataInput
  upsert: TokenUpsertWithoutChallengesInput
  delete: Boolean
  disconnect: Boolean
  connect: TokenWhereUniqueInput
}

input TokenUpdateWithoutChallengesDataInput {
  symbol: String
  description: String
  image: String
  amount: Float
  owner: UserUpdateOneWithoutTokensInput
  isChallenged: Boolean
  isWhitelistedMember: Boolean
  totalVotes: Int
  reputation: Int
  votes: VoteUpdateManyInput
}

input TokenUpdateWithoutOwnerDataInput {
  symbol: String
  description: String
  image: String
  amount: Float
  isChallenged: Boolean
  challenges: ChallengeUpdateManyWithoutTokenInput
  isWhitelistedMember: Boolean
  totalVotes: Int
  reputation: Int
  votes: VoteUpdateManyInput
}

input TokenUpdateWithWhereUniqueWithoutOwnerInput {
  where: TokenWhereUniqueInput!
  data: TokenUpdateWithoutOwnerDataInput!
}

input TokenUpsertWithoutChallengesInput {
  update: TokenUpdateWithoutChallengesDataInput!
  create: TokenCreateWithoutChallengesInput!
}

input TokenUpsertWithWhereUniqueWithoutOwnerInput {
  where: TokenWhereUniqueInput!
  update: TokenUpdateWithoutOwnerDataInput!
  create: TokenCreateWithoutOwnerInput!
}

input TokenWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  symbol: String
  symbol_not: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_gt: String
  symbol_gte: String
  symbol_contains: String
  symbol_not_contains: String
  symbol_starts_with: String
  symbol_not_starts_with: String
  symbol_ends_with: String
  symbol_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  owner: UserWhereInput
  isChallenged: Boolean
  isChallenged_not: Boolean
  challenges_every: ChallengeWhereInput
  challenges_some: ChallengeWhereInput
  challenges_none: ChallengeWhereInput
  isWhitelistedMember: Boolean
  isWhitelistedMember_not: Boolean
  totalVotes: Int
  totalVotes_not: Int
  totalVotes_in: [Int!]
  totalVotes_not_in: [Int!]
  totalVotes_lt: Int
  totalVotes_lte: Int
  totalVotes_gt: Int
  totalVotes_gte: Int
  reputation: Int
  reputation_not: Int
  reputation_in: [Int!]
  reputation_not_in: [Int!]
  reputation_lt: Int
  reputation_lte: Int
  reputation_gt: Int
  reputation_gte: Int
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [TokenWhereInput!]
  OR: [TokenWhereInput!]
  NOT: [TokenWhereInput!]
}

input TokenWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String
  bio: String
  tokens(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Token!]
  challenges(where: ChallengeWhereInput, orderBy: ChallengeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Challenge!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String
  bio: String
  tokens: TokenCreateManyWithoutOwnerInput
  challenges: ChallengeCreateManyInput
  votes: VoteCreateManyInput
}

input UserCreateOneWithoutTokensInput {
  create: UserCreateWithoutTokensInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTokensInput {
  id: ID
  name: String
  bio: String
  challenges: ChallengeCreateManyInput
  votes: VoteCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  bio_ASC
  bio_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  bio: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  bio: String
  tokens: TokenUpdateManyWithoutOwnerInput
  challenges: ChallengeUpdateManyInput
  votes: VoteUpdateManyInput
}

input UserUpdateManyMutationInput {
  name: String
  bio: String
}

input UserUpdateOneWithoutTokensInput {
  create: UserCreateWithoutTokensInput
  update: UserUpdateWithoutTokensDataInput
  upsert: UserUpsertWithoutTokensInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutTokensDataInput {
  name: String
  bio: String
  challenges: ChallengeUpdateManyInput
  votes: VoteUpdateManyInput
}

input UserUpsertWithoutTokensInput {
  update: UserUpdateWithoutTokensDataInput!
  create: UserCreateWithoutTokensInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  tokens_every: TokenWhereInput
  tokens_some: TokenWhereInput
  tokens_none: TokenWhereInput
  challenges_every: ChallengeWhereInput
  challenges_some: ChallengeWhereInput
  challenges_none: ChallengeWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}

type Vote {
  id: ID!
  challenge: Challenge!
  choice: Choice!
}

type VoteConnection {
  pageInfo: PageInfo!
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  id: ID
  challenge: ChallengeCreateOneWithoutVotesInput!
  choice: Choice!
}

input VoteCreateManyInput {
  create: [VoteCreateInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutChallengeInput {
  create: [VoteCreateWithoutChallengeInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutChallengeInput {
  id: ID
  choice: Choice!
}

type VoteEdge {
  node: Vote!
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  choice_ASC
  choice_DESC
}

type VotePreviousValues {
  id: ID!
  choice: Choice!
}

input VoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  choice: Choice
  choice_not: Choice
  choice_in: [Choice!]
  choice_not_in: [Choice!]
  AND: [VoteScalarWhereInput!]
  OR: [VoteScalarWhereInput!]
  NOT: [VoteScalarWhereInput!]
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
  AND: [VoteSubscriptionWhereInput!]
  OR: [VoteSubscriptionWhereInput!]
  NOT: [VoteSubscriptionWhereInput!]
}

input VoteUpdateDataInput {
  challenge: ChallengeUpdateOneRequiredWithoutVotesInput
  choice: Choice
}

input VoteUpdateInput {
  challenge: ChallengeUpdateOneRequiredWithoutVotesInput
  choice: Choice
}

input VoteUpdateManyDataInput {
  choice: Choice
}

input VoteUpdateManyInput {
  create: [VoteCreateInput!]
  update: [VoteUpdateWithWhereUniqueNestedInput!]
  upsert: [VoteUpsertWithWhereUniqueNestedInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyMutationInput {
  choice: Choice
}

input VoteUpdateManyWithoutChallengeInput {
  create: [VoteCreateWithoutChallengeInput!]
  delete: [VoteWhereUniqueInput!]
  connect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithWhereUniqueWithoutChallengeInput!]
  upsert: [VoteUpsertWithWhereUniqueWithoutChallengeInput!]
  deleteMany: [VoteScalarWhereInput!]
  updateMany: [VoteUpdateManyWithWhereNestedInput!]
}

input VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput!
  data: VoteUpdateManyDataInput!
}

input VoteUpdateWithoutChallengeDataInput {
  choice: Choice
}

input VoteUpdateWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateDataInput!
}

input VoteUpdateWithWhereUniqueWithoutChallengeInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutChallengeDataInput!
}

input VoteUpsertWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateDataInput!
  create: VoteCreateInput!
}

input VoteUpsertWithWhereUniqueWithoutChallengeInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutChallengeDataInput!
  create: VoteCreateWithoutChallengeInput!
}

input VoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  challenge: ChallengeWhereInput
  choice: Choice
  choice_not: Choice
  choice_in: [Choice!]
  choice_not_in: [Choice!]
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
}

input VoteWhereUniqueInput {
  id: ID
}
`
      }
    