// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  challenge: (where?: ChallengeWhereInput) => Promise<boolean>;
  token: (where?: TokenWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  challenge: (where: ChallengeWhereUniqueInput) => ChallengeNullablePromise;
  challenges: (args?: {
    where?: ChallengeWhereInput;
    orderBy?: ChallengeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Challenge>;
  challengesConnection: (args?: {
    where?: ChallengeWhereInput;
    orderBy?: ChallengeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChallengeConnectionPromise;
  token: (where: TokenWhereUniqueInput) => TokenNullablePromise;
  tokens: (args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Token>;
  tokensConnection: (args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TokenConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VoteNullablePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChallenge: (data: ChallengeCreateInput) => ChallengePromise;
  updateChallenge: (args: {
    data: ChallengeUpdateInput;
    where: ChallengeWhereUniqueInput;
  }) => ChallengePromise;
  updateManyChallenges: (args: {
    data: ChallengeUpdateManyMutationInput;
    where?: ChallengeWhereInput;
  }) => BatchPayloadPromise;
  upsertChallenge: (args: {
    where: ChallengeWhereUniqueInput;
    create: ChallengeCreateInput;
    update: ChallengeUpdateInput;
  }) => ChallengePromise;
  deleteChallenge: (where: ChallengeWhereUniqueInput) => ChallengePromise;
  deleteManyChallenges: (where?: ChallengeWhereInput) => BatchPayloadPromise;
  createToken: (data: TokenCreateInput) => TokenPromise;
  updateToken: (args: {
    data: TokenUpdateInput;
    where: TokenWhereUniqueInput;
  }) => TokenPromise;
  updateManyTokens: (args: {
    data: TokenUpdateManyMutationInput;
    where?: TokenWhereInput;
  }) => BatchPayloadPromise;
  upsertToken: (args: {
    where: TokenWhereUniqueInput;
    create: TokenCreateInput;
    update: TokenUpdateInput;
  }) => TokenPromise;
  deleteToken: (where: TokenWhereUniqueInput) => TokenPromise;
  deleteManyTokens: (where?: TokenWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  updateManyVotes: (args: {
    data: VoteUpdateManyMutationInput;
    where?: VoteWhereInput;
  }) => BatchPayloadPromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  challenge: (
    where?: ChallengeSubscriptionWhereInput
  ) => ChallengeSubscriptionPayloadSubscription;
  token: (
    where?: TokenSubscriptionWhereInput
  ) => TokenSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Choice = "RemoveToken" | "KeepToken";

export type TokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "symbol_ASC"
  | "symbol_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "isChallenged_ASC"
  | "isChallenged_DESC"
  | "isWhitelistedMember_ASC"
  | "isWhitelistedMember_DESC"
  | "totalVotes_ASC"
  | "totalVotes_DESC"
  | "reputation_ASC"
  | "reputation_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ChallengeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "votesFor_ASC"
  | "votesFor_DESC"
  | "votesAgainst_ASC"
  | "votesAgainst_DESC"
  | "owner_ASC"
  | "owner_DESC"
  | "resolved_ASC"
  | "resolved_DESC";

export type VoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "choice_ASC"
  | "choice_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "bio_ASC"
  | "bio_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ChallengeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TokenWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  symbol?: Maybe<String>;
  symbol_not?: Maybe<String>;
  symbol_in?: Maybe<String[] | String>;
  symbol_not_in?: Maybe<String[] | String>;
  symbol_lt?: Maybe<String>;
  symbol_lte?: Maybe<String>;
  symbol_gt?: Maybe<String>;
  symbol_gte?: Maybe<String>;
  symbol_contains?: Maybe<String>;
  symbol_not_contains?: Maybe<String>;
  symbol_starts_with?: Maybe<String>;
  symbol_not_starts_with?: Maybe<String>;
  symbol_ends_with?: Maybe<String>;
  symbol_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  owner?: Maybe<UserWhereInput>;
  isChallenged?: Maybe<Boolean>;
  isChallenged_not?: Maybe<Boolean>;
  challenges_every?: Maybe<ChallengeWhereInput>;
  challenges_some?: Maybe<ChallengeWhereInput>;
  challenges_none?: Maybe<ChallengeWhereInput>;
  isWhitelistedMember?: Maybe<Boolean>;
  isWhitelistedMember_not?: Maybe<Boolean>;
  totalVotes?: Maybe<Int>;
  totalVotes_not?: Maybe<Int>;
  totalVotes_in?: Maybe<Int[] | Int>;
  totalVotes_not_in?: Maybe<Int[] | Int>;
  totalVotes_lt?: Maybe<Int>;
  totalVotes_lte?: Maybe<Int>;
  totalVotes_gt?: Maybe<Int>;
  totalVotes_gte?: Maybe<Int>;
  reputation?: Maybe<Int>;
  reputation_not?: Maybe<Int>;
  reputation_in?: Maybe<Int[] | Int>;
  reputation_not_in?: Maybe<Int[] | Int>;
  reputation_lt?: Maybe<Int>;
  reputation_lte?: Maybe<Int>;
  reputation_gt?: Maybe<Int>;
  reputation_gte?: Maybe<Int>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TokenWhereInput[] | TokenWhereInput>;
  OR?: Maybe<TokenWhereInput[] | TokenWhereInput>;
  NOT?: Maybe<TokenWhereInput[] | TokenWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  tokens_every?: Maybe<TokenWhereInput>;
  tokens_some?: Maybe<TokenWhereInput>;
  tokens_none?: Maybe<TokenWhereInput>;
  challenges_every?: Maybe<ChallengeWhereInput>;
  challenges_some?: Maybe<ChallengeWhereInput>;
  challenges_none?: Maybe<ChallengeWhereInput>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ChallengeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  votesFor?: Maybe<Int>;
  votesFor_not?: Maybe<Int>;
  votesFor_in?: Maybe<Int[] | Int>;
  votesFor_not_in?: Maybe<Int[] | Int>;
  votesFor_lt?: Maybe<Int>;
  votesFor_lte?: Maybe<Int>;
  votesFor_gt?: Maybe<Int>;
  votesFor_gte?: Maybe<Int>;
  votesAgainst?: Maybe<Int>;
  votesAgainst_not?: Maybe<Int>;
  votesAgainst_in?: Maybe<Int[] | Int>;
  votesAgainst_not_in?: Maybe<Int[] | Int>;
  votesAgainst_lt?: Maybe<Int>;
  votesAgainst_lte?: Maybe<Int>;
  votesAgainst_gt?: Maybe<Int>;
  votesAgainst_gte?: Maybe<Int>;
  token?: Maybe<TokenWhereInput>;
  owner?: Maybe<String>;
  owner_not?: Maybe<String>;
  owner_in?: Maybe<String[] | String>;
  owner_not_in?: Maybe<String[] | String>;
  owner_lt?: Maybe<String>;
  owner_lte?: Maybe<String>;
  owner_gt?: Maybe<String>;
  owner_gte?: Maybe<String>;
  owner_contains?: Maybe<String>;
  owner_not_contains?: Maybe<String>;
  owner_starts_with?: Maybe<String>;
  owner_not_starts_with?: Maybe<String>;
  owner_ends_with?: Maybe<String>;
  owner_not_ends_with?: Maybe<String>;
  resolved?: Maybe<Boolean>;
  resolved_not?: Maybe<Boolean>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<ChallengeWhereInput[] | ChallengeWhereInput>;
  OR?: Maybe<ChallengeWhereInput[] | ChallengeWhereInput>;
  NOT?: Maybe<ChallengeWhereInput[] | ChallengeWhereInput>;
}

export interface VoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  challenge?: Maybe<ChallengeWhereInput>;
  choice?: Maybe<Choice>;
  choice_not?: Maybe<Choice>;
  choice_in?: Maybe<Choice[] | Choice>;
  choice_not_in?: Maybe<Choice[] | Choice>;
  AND?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  OR?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  NOT?: Maybe<VoteWhereInput[] | VoteWhereInput>;
}

export type TokenWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type VoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChallengeCreateInput {
  id?: Maybe<ID_Input>;
  description?: Maybe<String>;
  votesFor?: Maybe<Int>;
  votesAgainst?: Maybe<Int>;
  token?: Maybe<TokenCreateOneWithoutChallengesInput>;
  owner?: Maybe<String>;
  resolved?: Maybe<Boolean>;
  votes?: Maybe<VoteCreateManyWithoutChallengeInput>;
}

export interface TokenCreateOneWithoutChallengesInput {
  create?: Maybe<TokenCreateWithoutChallengesInput>;
  connect?: Maybe<TokenWhereUniqueInput>;
}

export interface TokenCreateWithoutChallengesInput {
  id?: Maybe<ID_Input>;
  symbol: String;
  description: String;
  image?: Maybe<String>;
  amount?: Maybe<Float>;
  owner?: Maybe<UserCreateOneWithoutTokensInput>;
  isChallenged?: Maybe<Boolean>;
  isWhitelistedMember?: Maybe<Boolean>;
  totalVotes?: Maybe<Int>;
  reputation?: Maybe<Int>;
  votes?: Maybe<VoteCreateManyInput>;
}

export interface UserCreateOneWithoutTokensInput {
  create?: Maybe<UserCreateWithoutTokensInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTokensInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  bio?: Maybe<String>;
  challenges?: Maybe<ChallengeCreateManyInput>;
  votes?: Maybe<VoteCreateManyInput>;
}

export interface ChallengeCreateManyInput {
  create?: Maybe<ChallengeCreateInput[] | ChallengeCreateInput>;
  connect?: Maybe<ChallengeWhereUniqueInput[] | ChallengeWhereUniqueInput>;
}

export interface VoteCreateManyInput {
  create?: Maybe<VoteCreateInput[] | VoteCreateInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteCreateInput {
  id?: Maybe<ID_Input>;
  challenge: ChallengeCreateOneWithoutVotesInput;
  choice: Choice;
}

export interface ChallengeCreateOneWithoutVotesInput {
  create?: Maybe<ChallengeCreateWithoutVotesInput>;
  connect?: Maybe<ChallengeWhereUniqueInput>;
}

export interface ChallengeCreateWithoutVotesInput {
  id?: Maybe<ID_Input>;
  description?: Maybe<String>;
  votesFor?: Maybe<Int>;
  votesAgainst?: Maybe<Int>;
  token?: Maybe<TokenCreateOneWithoutChallengesInput>;
  owner?: Maybe<String>;
  resolved?: Maybe<Boolean>;
}

export interface VoteCreateManyWithoutChallengeInput {
  create?: Maybe<
    VoteCreateWithoutChallengeInput[] | VoteCreateWithoutChallengeInput
  >;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteCreateWithoutChallengeInput {
  id?: Maybe<ID_Input>;
  choice: Choice;
}

export interface ChallengeUpdateInput {
  description?: Maybe<String>;
  votesFor?: Maybe<Int>;
  votesAgainst?: Maybe<Int>;
  token?: Maybe<TokenUpdateOneWithoutChallengesInput>;
  owner?: Maybe<String>;
  resolved?: Maybe<Boolean>;
  votes?: Maybe<VoteUpdateManyWithoutChallengeInput>;
}

export interface TokenUpdateOneWithoutChallengesInput {
  create?: Maybe<TokenCreateWithoutChallengesInput>;
  update?: Maybe<TokenUpdateWithoutChallengesDataInput>;
  upsert?: Maybe<TokenUpsertWithoutChallengesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TokenWhereUniqueInput>;
}

export interface TokenUpdateWithoutChallengesDataInput {
  symbol?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  amount?: Maybe<Float>;
  owner?: Maybe<UserUpdateOneWithoutTokensInput>;
  isChallenged?: Maybe<Boolean>;
  isWhitelistedMember?: Maybe<Boolean>;
  totalVotes?: Maybe<Int>;
  reputation?: Maybe<Int>;
  votes?: Maybe<VoteUpdateManyInput>;
}

export interface UserUpdateOneWithoutTokensInput {
  create?: Maybe<UserCreateWithoutTokensInput>;
  update?: Maybe<UserUpdateWithoutTokensDataInput>;
  upsert?: Maybe<UserUpsertWithoutTokensInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTokensDataInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  challenges?: Maybe<ChallengeUpdateManyInput>;
  votes?: Maybe<VoteUpdateManyInput>;
}

export interface ChallengeUpdateManyInput {
  create?: Maybe<ChallengeCreateInput[] | ChallengeCreateInput>;
  update?: Maybe<
    | ChallengeUpdateWithWhereUniqueNestedInput[]
    | ChallengeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ChallengeUpsertWithWhereUniqueNestedInput[]
    | ChallengeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ChallengeWhereUniqueInput[] | ChallengeWhereUniqueInput>;
  connect?: Maybe<ChallengeWhereUniqueInput[] | ChallengeWhereUniqueInput>;
  set?: Maybe<ChallengeWhereUniqueInput[] | ChallengeWhereUniqueInput>;
  disconnect?: Maybe<ChallengeWhereUniqueInput[] | ChallengeWhereUniqueInput>;
  deleteMany?: Maybe<ChallengeScalarWhereInput[] | ChallengeScalarWhereInput>;
  updateMany?: Maybe<
    | ChallengeUpdateManyWithWhereNestedInput[]
    | ChallengeUpdateManyWithWhereNestedInput
  >;
}

export interface ChallengeUpdateWithWhereUniqueNestedInput {
  where: ChallengeWhereUniqueInput;
  data: ChallengeUpdateDataInput;
}

export interface ChallengeUpdateDataInput {
  description?: Maybe<String>;
  votesFor?: Maybe<Int>;
  votesAgainst?: Maybe<Int>;
  token?: Maybe<TokenUpdateOneWithoutChallengesInput>;
  owner?: Maybe<String>;
  resolved?: Maybe<Boolean>;
  votes?: Maybe<VoteUpdateManyWithoutChallengeInput>;
}

export interface VoteUpdateManyWithoutChallengeInput {
  create?: Maybe<
    VoteCreateWithoutChallengeInput[] | VoteCreateWithoutChallengeInput
  >;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutChallengeInput[]
    | VoteUpdateWithWhereUniqueWithoutChallengeInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutChallengeInput[]
    | VoteUpsertWithWhereUniqueWithoutChallengeInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  updateMany?: Maybe<
    VoteUpdateManyWithWhereNestedInput[] | VoteUpdateManyWithWhereNestedInput
  >;
}

export interface VoteUpdateWithWhereUniqueWithoutChallengeInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutChallengeDataInput;
}

export interface VoteUpdateWithoutChallengeDataInput {
  choice?: Maybe<Choice>;
}

export interface VoteUpsertWithWhereUniqueWithoutChallengeInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutChallengeDataInput;
  create: VoteCreateWithoutChallengeInput;
}

export interface VoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  choice?: Maybe<Choice>;
  choice_not?: Maybe<Choice>;
  choice_in?: Maybe<Choice[] | Choice>;
  choice_not_in?: Maybe<Choice[] | Choice>;
  AND?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  OR?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  NOT?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput;
  data: VoteUpdateManyDataInput;
}

export interface VoteUpdateManyDataInput {
  choice?: Maybe<Choice>;
}

export interface ChallengeUpsertWithWhereUniqueNestedInput {
  where: ChallengeWhereUniqueInput;
  update: ChallengeUpdateDataInput;
  create: ChallengeCreateInput;
}

export interface ChallengeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  votesFor?: Maybe<Int>;
  votesFor_not?: Maybe<Int>;
  votesFor_in?: Maybe<Int[] | Int>;
  votesFor_not_in?: Maybe<Int[] | Int>;
  votesFor_lt?: Maybe<Int>;
  votesFor_lte?: Maybe<Int>;
  votesFor_gt?: Maybe<Int>;
  votesFor_gte?: Maybe<Int>;
  votesAgainst?: Maybe<Int>;
  votesAgainst_not?: Maybe<Int>;
  votesAgainst_in?: Maybe<Int[] | Int>;
  votesAgainst_not_in?: Maybe<Int[] | Int>;
  votesAgainst_lt?: Maybe<Int>;
  votesAgainst_lte?: Maybe<Int>;
  votesAgainst_gt?: Maybe<Int>;
  votesAgainst_gte?: Maybe<Int>;
  owner?: Maybe<String>;
  owner_not?: Maybe<String>;
  owner_in?: Maybe<String[] | String>;
  owner_not_in?: Maybe<String[] | String>;
  owner_lt?: Maybe<String>;
  owner_lte?: Maybe<String>;
  owner_gt?: Maybe<String>;
  owner_gte?: Maybe<String>;
  owner_contains?: Maybe<String>;
  owner_not_contains?: Maybe<String>;
  owner_starts_with?: Maybe<String>;
  owner_not_starts_with?: Maybe<String>;
  owner_ends_with?: Maybe<String>;
  owner_not_ends_with?: Maybe<String>;
  resolved?: Maybe<Boolean>;
  resolved_not?: Maybe<Boolean>;
  AND?: Maybe<ChallengeScalarWhereInput[] | ChallengeScalarWhereInput>;
  OR?: Maybe<ChallengeScalarWhereInput[] | ChallengeScalarWhereInput>;
  NOT?: Maybe<ChallengeScalarWhereInput[] | ChallengeScalarWhereInput>;
}

export interface ChallengeUpdateManyWithWhereNestedInput {
  where: ChallengeScalarWhereInput;
  data: ChallengeUpdateManyDataInput;
}

export interface ChallengeUpdateManyDataInput {
  description?: Maybe<String>;
  votesFor?: Maybe<Int>;
  votesAgainst?: Maybe<Int>;
  owner?: Maybe<String>;
  resolved?: Maybe<Boolean>;
}

export interface VoteUpdateManyInput {
  create?: Maybe<VoteCreateInput[] | VoteCreateInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueNestedInput[]
    | VoteUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueNestedInput[]
    | VoteUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  updateMany?: Maybe<
    VoteUpdateManyWithWhereNestedInput[] | VoteUpdateManyWithWhereNestedInput
  >;
}

export interface VoteUpdateWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateDataInput;
}

export interface VoteUpdateDataInput {
  challenge?: Maybe<ChallengeUpdateOneRequiredWithoutVotesInput>;
  choice?: Maybe<Choice>;
}

export interface ChallengeUpdateOneRequiredWithoutVotesInput {
  create?: Maybe<ChallengeCreateWithoutVotesInput>;
  update?: Maybe<ChallengeUpdateWithoutVotesDataInput>;
  upsert?: Maybe<ChallengeUpsertWithoutVotesInput>;
  connect?: Maybe<ChallengeWhereUniqueInput>;
}

export interface ChallengeUpdateWithoutVotesDataInput {
  description?: Maybe<String>;
  votesFor?: Maybe<Int>;
  votesAgainst?: Maybe<Int>;
  token?: Maybe<TokenUpdateOneWithoutChallengesInput>;
  owner?: Maybe<String>;
  resolved?: Maybe<Boolean>;
}

export interface ChallengeUpsertWithoutVotesInput {
  update: ChallengeUpdateWithoutVotesDataInput;
  create: ChallengeCreateWithoutVotesInput;
}

export interface VoteUpsertWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateDataInput;
  create: VoteCreateInput;
}

export interface UserUpsertWithoutTokensInput {
  update: UserUpdateWithoutTokensDataInput;
  create: UserCreateWithoutTokensInput;
}

export interface TokenUpsertWithoutChallengesInput {
  update: TokenUpdateWithoutChallengesDataInput;
  create: TokenCreateWithoutChallengesInput;
}

export interface ChallengeUpdateManyMutationInput {
  description?: Maybe<String>;
  votesFor?: Maybe<Int>;
  votesAgainst?: Maybe<Int>;
  owner?: Maybe<String>;
  resolved?: Maybe<Boolean>;
}

export interface TokenCreateInput {
  id?: Maybe<ID_Input>;
  symbol: String;
  description: String;
  image?: Maybe<String>;
  amount?: Maybe<Float>;
  owner?: Maybe<UserCreateOneWithoutTokensInput>;
  isChallenged?: Maybe<Boolean>;
  challenges?: Maybe<ChallengeCreateManyWithoutTokenInput>;
  isWhitelistedMember?: Maybe<Boolean>;
  totalVotes?: Maybe<Int>;
  reputation?: Maybe<Int>;
  votes?: Maybe<VoteCreateManyInput>;
}

export interface ChallengeCreateManyWithoutTokenInput {
  create?: Maybe<
    ChallengeCreateWithoutTokenInput[] | ChallengeCreateWithoutTokenInput
  >;
  connect?: Maybe<ChallengeWhereUniqueInput[] | ChallengeWhereUniqueInput>;
}

export interface ChallengeCreateWithoutTokenInput {
  id?: Maybe<ID_Input>;
  description?: Maybe<String>;
  votesFor?: Maybe<Int>;
  votesAgainst?: Maybe<Int>;
  owner?: Maybe<String>;
  resolved?: Maybe<Boolean>;
  votes?: Maybe<VoteCreateManyWithoutChallengeInput>;
}

export interface TokenUpdateInput {
  symbol?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  amount?: Maybe<Float>;
  owner?: Maybe<UserUpdateOneWithoutTokensInput>;
  isChallenged?: Maybe<Boolean>;
  challenges?: Maybe<ChallengeUpdateManyWithoutTokenInput>;
  isWhitelistedMember?: Maybe<Boolean>;
  totalVotes?: Maybe<Int>;
  reputation?: Maybe<Int>;
  votes?: Maybe<VoteUpdateManyInput>;
}

export interface ChallengeUpdateManyWithoutTokenInput {
  create?: Maybe<
    ChallengeCreateWithoutTokenInput[] | ChallengeCreateWithoutTokenInput
  >;
  delete?: Maybe<ChallengeWhereUniqueInput[] | ChallengeWhereUniqueInput>;
  connect?: Maybe<ChallengeWhereUniqueInput[] | ChallengeWhereUniqueInput>;
  set?: Maybe<ChallengeWhereUniqueInput[] | ChallengeWhereUniqueInput>;
  disconnect?: Maybe<ChallengeWhereUniqueInput[] | ChallengeWhereUniqueInput>;
  update?: Maybe<
    | ChallengeUpdateWithWhereUniqueWithoutTokenInput[]
    | ChallengeUpdateWithWhereUniqueWithoutTokenInput
  >;
  upsert?: Maybe<
    | ChallengeUpsertWithWhereUniqueWithoutTokenInput[]
    | ChallengeUpsertWithWhereUniqueWithoutTokenInput
  >;
  deleteMany?: Maybe<ChallengeScalarWhereInput[] | ChallengeScalarWhereInput>;
  updateMany?: Maybe<
    | ChallengeUpdateManyWithWhereNestedInput[]
    | ChallengeUpdateManyWithWhereNestedInput
  >;
}

export interface ChallengeUpdateWithWhereUniqueWithoutTokenInput {
  where: ChallengeWhereUniqueInput;
  data: ChallengeUpdateWithoutTokenDataInput;
}

export interface ChallengeUpdateWithoutTokenDataInput {
  description?: Maybe<String>;
  votesFor?: Maybe<Int>;
  votesAgainst?: Maybe<Int>;
  owner?: Maybe<String>;
  resolved?: Maybe<Boolean>;
  votes?: Maybe<VoteUpdateManyWithoutChallengeInput>;
}

export interface ChallengeUpsertWithWhereUniqueWithoutTokenInput {
  where: ChallengeWhereUniqueInput;
  update: ChallengeUpdateWithoutTokenDataInput;
  create: ChallengeCreateWithoutTokenInput;
}

export interface TokenUpdateManyMutationInput {
  symbol?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  amount?: Maybe<Float>;
  isChallenged?: Maybe<Boolean>;
  isWhitelistedMember?: Maybe<Boolean>;
  totalVotes?: Maybe<Int>;
  reputation?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  bio?: Maybe<String>;
  tokens?: Maybe<TokenCreateManyWithoutOwnerInput>;
  challenges?: Maybe<ChallengeCreateManyInput>;
  votes?: Maybe<VoteCreateManyInput>;
}

export interface TokenCreateManyWithoutOwnerInput {
  create?: Maybe<TokenCreateWithoutOwnerInput[] | TokenCreateWithoutOwnerInput>;
  connect?: Maybe<TokenWhereUniqueInput[] | TokenWhereUniqueInput>;
}

export interface TokenCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  symbol: String;
  description: String;
  image?: Maybe<String>;
  amount?: Maybe<Float>;
  isChallenged?: Maybe<Boolean>;
  challenges?: Maybe<ChallengeCreateManyWithoutTokenInput>;
  isWhitelistedMember?: Maybe<Boolean>;
  totalVotes?: Maybe<Int>;
  reputation?: Maybe<Int>;
  votes?: Maybe<VoteCreateManyInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
  tokens?: Maybe<TokenUpdateManyWithoutOwnerInput>;
  challenges?: Maybe<ChallengeUpdateManyInput>;
  votes?: Maybe<VoteUpdateManyInput>;
}

export interface TokenUpdateManyWithoutOwnerInput {
  create?: Maybe<TokenCreateWithoutOwnerInput[] | TokenCreateWithoutOwnerInput>;
  delete?: Maybe<TokenWhereUniqueInput[] | TokenWhereUniqueInput>;
  connect?: Maybe<TokenWhereUniqueInput[] | TokenWhereUniqueInput>;
  set?: Maybe<TokenWhereUniqueInput[] | TokenWhereUniqueInput>;
  disconnect?: Maybe<TokenWhereUniqueInput[] | TokenWhereUniqueInput>;
  update?: Maybe<
    | TokenUpdateWithWhereUniqueWithoutOwnerInput[]
    | TokenUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | TokenUpsertWithWhereUniqueWithoutOwnerInput[]
    | TokenUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<TokenScalarWhereInput[] | TokenScalarWhereInput>;
  updateMany?: Maybe<
    TokenUpdateManyWithWhereNestedInput[] | TokenUpdateManyWithWhereNestedInput
  >;
}

export interface TokenUpdateWithWhereUniqueWithoutOwnerInput {
  where: TokenWhereUniqueInput;
  data: TokenUpdateWithoutOwnerDataInput;
}

export interface TokenUpdateWithoutOwnerDataInput {
  symbol?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  amount?: Maybe<Float>;
  isChallenged?: Maybe<Boolean>;
  challenges?: Maybe<ChallengeUpdateManyWithoutTokenInput>;
  isWhitelistedMember?: Maybe<Boolean>;
  totalVotes?: Maybe<Int>;
  reputation?: Maybe<Int>;
  votes?: Maybe<VoteUpdateManyInput>;
}

export interface TokenUpsertWithWhereUniqueWithoutOwnerInput {
  where: TokenWhereUniqueInput;
  update: TokenUpdateWithoutOwnerDataInput;
  create: TokenCreateWithoutOwnerInput;
}

export interface TokenScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  symbol?: Maybe<String>;
  symbol_not?: Maybe<String>;
  symbol_in?: Maybe<String[] | String>;
  symbol_not_in?: Maybe<String[] | String>;
  symbol_lt?: Maybe<String>;
  symbol_lte?: Maybe<String>;
  symbol_gt?: Maybe<String>;
  symbol_gte?: Maybe<String>;
  symbol_contains?: Maybe<String>;
  symbol_not_contains?: Maybe<String>;
  symbol_starts_with?: Maybe<String>;
  symbol_not_starts_with?: Maybe<String>;
  symbol_ends_with?: Maybe<String>;
  symbol_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  isChallenged?: Maybe<Boolean>;
  isChallenged_not?: Maybe<Boolean>;
  isWhitelistedMember?: Maybe<Boolean>;
  isWhitelistedMember_not?: Maybe<Boolean>;
  totalVotes?: Maybe<Int>;
  totalVotes_not?: Maybe<Int>;
  totalVotes_in?: Maybe<Int[] | Int>;
  totalVotes_not_in?: Maybe<Int[] | Int>;
  totalVotes_lt?: Maybe<Int>;
  totalVotes_lte?: Maybe<Int>;
  totalVotes_gt?: Maybe<Int>;
  totalVotes_gte?: Maybe<Int>;
  reputation?: Maybe<Int>;
  reputation_not?: Maybe<Int>;
  reputation_in?: Maybe<Int[] | Int>;
  reputation_not_in?: Maybe<Int[] | Int>;
  reputation_lt?: Maybe<Int>;
  reputation_lte?: Maybe<Int>;
  reputation_gt?: Maybe<Int>;
  reputation_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TokenScalarWhereInput[] | TokenScalarWhereInput>;
  OR?: Maybe<TokenScalarWhereInput[] | TokenScalarWhereInput>;
  NOT?: Maybe<TokenScalarWhereInput[] | TokenScalarWhereInput>;
}

export interface TokenUpdateManyWithWhereNestedInput {
  where: TokenScalarWhereInput;
  data: TokenUpdateManyDataInput;
}

export interface TokenUpdateManyDataInput {
  symbol?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  amount?: Maybe<Float>;
  isChallenged?: Maybe<Boolean>;
  isWhitelistedMember?: Maybe<Boolean>;
  totalVotes?: Maybe<Int>;
  reputation?: Maybe<Int>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  bio?: Maybe<String>;
}

export interface VoteUpdateInput {
  challenge?: Maybe<ChallengeUpdateOneRequiredWithoutVotesInput>;
  choice?: Maybe<Choice>;
}

export interface VoteUpdateManyMutationInput {
  choice?: Maybe<Choice>;
}

export interface ChallengeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChallengeWhereInput>;
  AND?: Maybe<
    ChallengeSubscriptionWhereInput[] | ChallengeSubscriptionWhereInput
  >;
  OR?: Maybe<
    ChallengeSubscriptionWhereInput[] | ChallengeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ChallengeSubscriptionWhereInput[] | ChallengeSubscriptionWhereInput
  >;
}

export interface TokenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TokenWhereInput>;
  AND?: Maybe<TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput>;
  OR?: Maybe<TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput>;
  NOT?: Maybe<TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VoteWhereInput>;
  AND?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  OR?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  NOT?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Challenge {
  id: ID_Output;
  description?: String;
  createdAt: DateTimeOutput;
  votesFor?: Int;
  votesAgainst?: Int;
  owner?: String;
  resolved?: Boolean;
}

export interface ChallengePromise extends Promise<Challenge>, Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  votesFor: () => Promise<Int>;
  votesAgainst: () => Promise<Int>;
  token: <T = TokenPromise>() => T;
  owner: () => Promise<String>;
  resolved: () => Promise<Boolean>;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChallengeSubscription
  extends Promise<AsyncIterator<Challenge>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  votesFor: () => Promise<AsyncIterator<Int>>;
  votesAgainst: () => Promise<AsyncIterator<Int>>;
  token: <T = TokenSubscription>() => T;
  owner: () => Promise<AsyncIterator<String>>;
  resolved: () => Promise<AsyncIterator<Boolean>>;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChallengeNullablePromise
  extends Promise<Challenge | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  votesFor: () => Promise<Int>;
  votesAgainst: () => Promise<Int>;
  token: <T = TokenPromise>() => T;
  owner: () => Promise<String>;
  resolved: () => Promise<Boolean>;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Token {
  id: ID_Output;
  symbol: String;
  description: String;
  image?: String;
  amount?: Float;
  isChallenged?: Boolean;
  isWhitelistedMember?: Boolean;
  totalVotes?: Int;
  reputation?: Int;
  createdAt: DateTimeOutput;
}

export interface TokenPromise extends Promise<Token>, Fragmentable {
  id: () => Promise<ID_Output>;
  symbol: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  amount: () => Promise<Float>;
  owner: <T = UserPromise>() => T;
  isChallenged: () => Promise<Boolean>;
  challenges: <T = FragmentableArray<Challenge>>(args?: {
    where?: ChallengeWhereInput;
    orderBy?: ChallengeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isWhitelistedMember: () => Promise<Boolean>;
  totalVotes: () => Promise<Int>;
  reputation: () => Promise<Int>;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TokenSubscription
  extends Promise<AsyncIterator<Token>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  symbol: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Float>>;
  owner: <T = UserSubscription>() => T;
  isChallenged: () => Promise<AsyncIterator<Boolean>>;
  challenges: <T = Promise<AsyncIterator<ChallengeSubscription>>>(args?: {
    where?: ChallengeWhereInput;
    orderBy?: ChallengeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isWhitelistedMember: () => Promise<AsyncIterator<Boolean>>;
  totalVotes: () => Promise<AsyncIterator<Int>>;
  reputation: () => Promise<AsyncIterator<Int>>;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TokenNullablePromise
  extends Promise<Token | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  symbol: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  amount: () => Promise<Float>;
  owner: <T = UserPromise>() => T;
  isChallenged: () => Promise<Boolean>;
  challenges: <T = FragmentableArray<Challenge>>(args?: {
    where?: ChallengeWhereInput;
    orderBy?: ChallengeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isWhitelistedMember: () => Promise<Boolean>;
  totalVotes: () => Promise<Int>;
  reputation: () => Promise<Int>;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  name?: String;
  bio?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  bio: () => Promise<String>;
  tokens: <T = FragmentableArray<Token>>(args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  challenges: <T = FragmentableArray<Challenge>>(args?: {
    where?: ChallengeWhereInput;
    orderBy?: ChallengeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  tokens: <T = Promise<AsyncIterator<TokenSubscription>>>(args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  challenges: <T = Promise<AsyncIterator<ChallengeSubscription>>>(args?: {
    where?: ChallengeWhereInput;
    orderBy?: ChallengeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  bio: () => Promise<String>;
  tokens: <T = FragmentableArray<Token>>(args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  challenges: <T = FragmentableArray<Challenge>>(args?: {
    where?: ChallengeWhereInput;
    orderBy?: ChallengeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Vote {
  id: ID_Output;
  choice: Choice;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  challenge: <T = ChallengePromise>() => T;
  choice: () => Promise<Choice>;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  challenge: <T = ChallengeSubscription>() => T;
  choice: () => Promise<AsyncIterator<Choice>>;
}

export interface VoteNullablePromise
  extends Promise<Vote | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  challenge: <T = ChallengePromise>() => T;
  choice: () => Promise<Choice>;
}

export interface ChallengeConnection {
  pageInfo: PageInfo;
  edges: ChallengeEdge[];
}

export interface ChallengeConnectionPromise
  extends Promise<ChallengeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChallengeEdge>>() => T;
  aggregate: <T = AggregateChallengePromise>() => T;
}

export interface ChallengeConnectionSubscription
  extends Promise<AsyncIterator<ChallengeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChallengeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChallengeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChallengeEdge {
  node: Challenge;
  cursor: String;
}

export interface ChallengeEdgePromise
  extends Promise<ChallengeEdge>,
    Fragmentable {
  node: <T = ChallengePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChallengeEdgeSubscription
  extends Promise<AsyncIterator<ChallengeEdge>>,
    Fragmentable {
  node: <T = ChallengeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChallenge {
  count: Int;
}

export interface AggregateChallengePromise
  extends Promise<AggregateChallenge>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChallengeSubscription
  extends Promise<AsyncIterator<AggregateChallenge>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TokenConnection {
  pageInfo: PageInfo;
  edges: TokenEdge[];
}

export interface TokenConnectionPromise
  extends Promise<TokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TokenEdge>>() => T;
  aggregate: <T = AggregateTokenPromise>() => T;
}

export interface TokenConnectionSubscription
  extends Promise<AsyncIterator<TokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTokenSubscription>() => T;
}

export interface TokenEdge {
  node: Token;
  cursor: String;
}

export interface TokenEdgePromise extends Promise<TokenEdge>, Fragmentable {
  node: <T = TokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TokenEdgeSubscription
  extends Promise<AsyncIterator<TokenEdge>>,
    Fragmentable {
  node: <T = TokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateToken {
  count: Int;
}

export interface AggregateTokenPromise
  extends Promise<AggregateToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTokenSubscription
  extends Promise<AsyncIterator<AggregateToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ChallengeSubscriptionPayload {
  mutation: MutationType;
  node: Challenge;
  updatedFields: String[];
  previousValues: ChallengePreviousValues;
}

export interface ChallengeSubscriptionPayloadPromise
  extends Promise<ChallengeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChallengePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChallengePreviousValuesPromise>() => T;
}

export interface ChallengeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChallengeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChallengeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChallengePreviousValuesSubscription>() => T;
}

export interface ChallengePreviousValues {
  id: ID_Output;
  description?: String;
  createdAt: DateTimeOutput;
  votesFor?: Int;
  votesAgainst?: Int;
  owner?: String;
  resolved?: Boolean;
}

export interface ChallengePreviousValuesPromise
  extends Promise<ChallengePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  votesFor: () => Promise<Int>;
  votesAgainst: () => Promise<Int>;
  owner: () => Promise<String>;
  resolved: () => Promise<Boolean>;
}

export interface ChallengePreviousValuesSubscription
  extends Promise<AsyncIterator<ChallengePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  votesFor: () => Promise<AsyncIterator<Int>>;
  votesAgainst: () => Promise<AsyncIterator<Int>>;
  owner: () => Promise<AsyncIterator<String>>;
  resolved: () => Promise<AsyncIterator<Boolean>>;
}

export interface TokenSubscriptionPayload {
  mutation: MutationType;
  node: Token;
  updatedFields: String[];
  previousValues: TokenPreviousValues;
}

export interface TokenSubscriptionPayloadPromise
  extends Promise<TokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TokenPreviousValuesPromise>() => T;
}

export interface TokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TokenPreviousValuesSubscription>() => T;
}

export interface TokenPreviousValues {
  id: ID_Output;
  symbol: String;
  description: String;
  image?: String;
  amount?: Float;
  isChallenged?: Boolean;
  isWhitelistedMember?: Boolean;
  totalVotes?: Int;
  reputation?: Int;
  createdAt: DateTimeOutput;
}

export interface TokenPreviousValuesPromise
  extends Promise<TokenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  symbol: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  amount: () => Promise<Float>;
  isChallenged: () => Promise<Boolean>;
  isWhitelistedMember: () => Promise<Boolean>;
  totalVotes: () => Promise<Int>;
  reputation: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface TokenPreviousValuesSubscription
  extends Promise<AsyncIterator<TokenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  symbol: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Float>>;
  isChallenged: () => Promise<AsyncIterator<Boolean>>;
  isWhitelistedMember: () => Promise<AsyncIterator<Boolean>>;
  totalVotes: () => Promise<AsyncIterator<Int>>;
  reputation: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name?: String;
  bio?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  bio: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface VotePreviousValues {
  id: ID_Output;
  choice: Choice;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  choice: () => Promise<Choice>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  choice: () => Promise<AsyncIterator<Choice>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Token",
    embedded: false
  },
  {
    name: "Challenge",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Choice",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
